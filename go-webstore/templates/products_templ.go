// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"go-store/types"
	"math/rand/v2"
)

func Products(products types.ProductResults) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>Go Webstore</title><link rel=\"stylesheet\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("assets/styles/styles.css?%d", rand.IntN(10000)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 14, Col: 97}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main><h2>Product Information</h2><div class=\"table-wrapper\"><table><thead><th>Product Name</th><th>Image Name</th><th>In Stock</th><th>Price</th><th>Inactive</th></thead> <tbody>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, product := range products.Product {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<tr onclick=\"fillFormFromCustomerRow(this)\"><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(product.ProductName)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 32, Col: 57}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(product.ImageName)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 33, Col: 54}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", product.InStock))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 34, Col: 72}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", product.Price))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 35, Col: 72}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td><td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", product.Inactive))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/products.templ`, Line: 36, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</td></tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</tbody></table></div></main><div class=\"container\"><form id=\"productForm\" method=\"post\" onsubmit=\"submitProductForm(); return false;\"><fieldset><legend>Product Info</legend> <input type=\"hidden\" id=\"productID\" name=\"productID\"> <label for=\"pname\">Product name:</label><br><input type=\"text\" id=\"pname\" name=\"pname\" pattern=\"[A-Za-z\\s&#39;]+\" title=\"Only letters, spaces, and apostrophes allowed\" required><br><label for=\"pimage\">Product Image:</label><br><input type=\"text\" id=\"pimage\" name=\"pimage\" pattern=\"[A-Za-z\\s&#39;.]+\" title=\"Only letters, spaces, apostrophes, and periods allowed\" required><br><label for=\"quantity\">Quantity:</label><br><input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" title=\"Please enter a valid integer quantity\" required><br><label for=\"price\">Price:</label><br><input type=\"number\" id=\"price\" name=\"price\" step=\"0.01\" min=\"0\" title=\"Please enter a valid price\" required><br><button type=\"button\" class=\"status-button\" id=\"status-button\" onclick=\"toggleStatus()\">Inactive</button></fieldset><button type=\"button\" onclick=\"submitProductForm()\">Add Product</button> <button type=\"button\" onclick=\"updateProductForm()\">Update</button> <button type=\"button\" onclick=\"deleteProductForm()\">Delete</button></form></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n            function toggleStatus() {\n                const button = document.getElementById('status-button');\n                const label = document.getElementById('status-label');\n\n                button.classList.toggle('active');\n\n                if (button.classList.contains('active')) {\n                    button.innerText = 'Active';\n                    label.innerText = 'Active';\n                } else {\n                    button.innerText = 'Inactive';\n                    label.innerText = 'Inactive';\n                }\n            }\n\n            // function fillFormWithProductData(productID, productName, productImage, inStock, price, inactive) {\n            //     document.getElementById('productID').value = productID;\n            //     document.getElementById('pname').value = productName;\n            //     document.getElementById('pimage').value = productImage;\n            //     document.getElementById('quantity').value = inStock;\n            //     document.getElementById('price').value = price;\n\n            //     // Set the status button text based on the \"inactive\" value\n            //     const button = document.getElementById('status-button');\n            //     if (inactive === 0) {\n            //         button.classList.remove('active');\n            //         button.innerText = 'Inactive';\n            //     } else {\n            //         button.classList.add('active');\n            //         button.innerText = 'Active';\n            //     }\n            // }\n\n            function submitProductForm() {\n                const formData = {\n                    pname: document.getElementById('pname').value,\n                    pimage: document.getElementById('pimage').value,\n                    quantity: parseInt(document.getElementById('quantity').value),\n                    price: parseFloat(document.getElementById('price').value),\n                    status: document.getElementById('status-button').classList.contains('active') ? 1 : 0\n                };\n\n                fetch('/addProduct', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(formData)\n                })\n                .then(response => response.json())\n                .then(data => {\n                    console.log(\"Product added successfully\", data);\n                    alert(\"Product added, CONGRATS!\");\n                })\n                .catch(error => {\n                    console.error(\"Error adding product:\", error);\n                });\n            }\n            \n            function updateProductForm() {\n                const formData = {\n                    pname: document.getElementById('pname').value,\n                    pimage: document.getElementById('pimage').value,\n                    quantity: parseInt(document.getElementById('quantity').value),\n                    price: parseFloat(document.getElementById('price').value),\n                    status: document.getElementById('status-button').classList.contains('active') ? 1 : 0\n                };\n\n    //              console.log(\"Product Name (pname):\", formData.pname);\n    // console.log(\"Product Image (pimage):\", formData.pimage);\n    // console.log(\"Quantity:\", formData.quantity);\n    // console.log(\"Price:\", formData.price);\n    // console.log(\"Status:\", formData.status);\n\n                fetch('/updateProduct', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(formData)\n                })\n                .then(response => response.json())\n                .then(data => {\n                    console.log(\"Product updated successfully\", data);\n                    alert(\"Product updated successfully!\");\n                })\n                .catch(error => {\n                    console.error(\"Error updating product:\", error);\n                });\n            }\n\n            function deleteProductForm() {\n                const isConfirmed = confirm(\"Are you sure you want to delete this item?\");\n                if (isConfirmed) {\n                    const formData = {\n                        pname: document.getElementById('pname').value,\n                        pimage: document.getElementById('pimage').value,\n                        quantity: parseInt(document.getElementById('quantity').value),\n                        price: parseFloat(document.getElementById('price').value),\n                        status: document.getElementById('status-button').classList.contains('active') ? 1 : 0\n                    };\n\n                    fetch('/deleteProduct', {  \n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(formData)\n                    })\n                    .then(response => response.json())\n                    .then(data => {\n                        console.log(\"Product deleted successfully\", data);  \n                        alert(\"Product deleted, it's gone!\");\n                    })\n                    .catch(error => {\n                        console.error(\"Error deleting product:\", error);\n                    });\n                } else {\n                    console.log(\"Product deletion canceled\");\n                }\n            }\n\n\n            function fillFormFromCustomerRow(row) {\n                const cells = row.getElementsByTagName(\"td\");\n                document.getElementById(\"pname\").value = cells[0].textContent;\n                document.getElementById(\"pimage\").value = cells[1].textContent;\n                document.getElementById(\"quantity\").value = cells[2].textContent;\n                document.getElementById(\"price\").value = cells[3].textContent;\n                const statusButton = document.getElementById(\"status-button\");\n                if (parseInt(cells[4].textContent) === 1) {\n                    statusButton.textContent = \"Inactive\";\n                } else {\n                    statusButton.textContent = \"Active\";\n                }\n            }\n\n\n\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
