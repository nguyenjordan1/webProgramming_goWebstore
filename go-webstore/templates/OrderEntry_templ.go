// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"go-store/types"
	"math/rand"
)

func OrderEntry(products []types.Product) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html><head><title>Go Webstore</title><link rel=\"stylesheet\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("assets/styles/styles.css?%d", rand.Intn(10000)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/OrderEntry.templ`, Line: 13, Col: 97}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script></head><body>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container\"><div class=\"content\"><main><form id=\"order-form\"><fieldset><legend>Personal Info</legend> <label for=\"fname\">First name:</label><br><input type=\"text\" id=\"fname\" name=\"fname\" pattern=\"[A-Za-z\\s&#39;]+\" title=\"Only letters, spaces, and apostrophes allowed\" required><br><label for=\"lname\">Last name:</label><br><input type=\"text\" id=\"lname\" name=\"lname\" pattern=\"[A-Za-z\\s&#39;]+\" title=\"Only letters, spaces, and apostrophes allowed\" required><br><label for=\"email\">Email:</label><br><input type=\"email\" id=\"email\" name=\"email\" required><br></fieldset><fieldset><legend>Product Info</legend> <select name=\"product\" id=\"product\" onchange=\"showProductQuantity()\"><option disabled selected>-- Select a Product -- </option> <option value=\"babyBottle\" data-image=\"babybottle.jpg\" data-stock=\"0\">babyBottle - $5.00</option> <option value=\"diapers\" data-image=\"diapers.jpg\" data-stock=\"3\">diapers - $30.00</option> <option value=\"pacifier\" data-image=\"pacifier.jpg\" data-stock=\"10\">pacifier - $10.00</option></select><br><label for=\"available\">Available:</label><br><input type=\"text\" id=\"available\" readonly value=\"Select a product\" class=\"available-field\"><br><label for=\"quantity\">Quantity:</label><br><input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"100\" value=\"1\" required><br></fieldset><button type=\"submit\">Purchase</button> <button type=\"reset\">Clear Fields</button></form></main><aside><h3>Customer Information</h3><table id=\"customer-list\" border=\"1\" style=\"display:none;\"><thead><tr><th>Name</th><th>Email</th><th>Product</th></tr></thead> <tbody><!-- Customer rows will be dynamically populated here --></tbody></table></aside></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n            document.addEventListener('DOMContentLoaded', () => {\n                const firstNameInput = document.getElementById('fname');\n                const lastNameInput = document.getElementById('lname');\n                const customerTable = document.getElementById('customer-list');\n                const customerTableBody = customerTable.querySelector('tbody');\n                let selectedRow = null;\n                let lastQuery = '';\n                let debounceTimer;\n\n                async function fetchCustomers(query) {\n                    if (query === lastQuery) return;\n                    lastQuery = query;\n\n                    try {\n                        const response = await fetch(`/get_customers?search=${encodeURIComponent(query)}`);\n                        if (!response.ok) throw new Error('Network response was not ok');\n\n                        const tableHTML = await response.text();\n                        customerTableBody.innerHTML = tableHTML.includes('<tr') ? tableHTML : '<tr><td colspan=\"3\">No matches</td></tr>';\n                        customerTable.style.display = tableHTML.includes('<tr') ? 'table' : 'none';\n\n                        addRowClickHandlers();\n                    } catch (error) {\n                        console.error('Error fetching customers:', error);\n                        customerTableBody.innerHTML = '<tr><td colspan=\"3\">No matches</td></tr>';\n                        customerTable.style.display = 'table';\n                    }\n                }\n\n                function addRowClickHandlers() {\n                    const rows = customerTableBody.querySelectorAll('tr');\n                    rows.forEach(row => {\n                        row.addEventListener('click', () => {\n                            if (selectedRow) {\n                                selectedRow.classList.remove('selected-row');\n                            }\n                            row.classList.add('selected-row');\n                            selectedRow = row;\n\n                            firstNameInput.value = row.cells[0].textContent;\n                            lastNameInput.value = row.cells[1].textContent;\n                            document.getElementById('email').value = row.cells[2].textContent;\n                        });\n                    });\n                }\n\n                [firstNameInput, lastNameInput].forEach(input => {\n                    input.addEventListener('keyup', () => {\n                        clearTimeout(debounceTimer);\n                        debounceTimer = setTimeout(() => {\n                            const query = firstNameInput.value || lastNameInput.value;\n                            if (query) {\n                                fetchCustomers(query);\n                            } else {\n                                customerTable.style.display = 'none';\n                                customerTableBody.innerHTML = '';\n                            }\n                        }, 300);\n                    });\n                });\n\n                \n            });\n\n            function showProductQuantity() {\n                var selectedProduct = document.getElementById('product').value;  \n                if (selectedProduct) {  \n                    var xmlhttp = new XMLHttpRequest();  \n                    xmlhttp.onreadystatechange = function() {  \n                        if (this.readyState == 4 && this.status == 200) {  \n                            var data = JSON.parse(this.responseText);  \n                            document.getElementById('available').value = data.quantity !== null ? data.quantity : \"Unavailable\";  \n                        } else if (this.readyState == 4) {\n                            document.getElementById('available').value = \"Unavailable\";  \n                        }  \n                    };  \n                    xmlhttp.open(\"GET\", \"/get_product_quantity?product=\" + encodeURIComponent(selectedProduct), true);  \n                    xmlhttp.send();  \n                } else {  \n                    document.getElementById('available').value = \"Select a product\";  \n                }\n            }\n            \n           $(document).ready(function() {\n                $(\"#order-form\").submit(function(e) {\n                    e.preventDefault(); \n                    const formData = {\n                        fname: $(\"#fname\").val(),\n                        lname: $(\"#lname\").val(),\n                        email: $(\"#email\").val(),\n                        product: $(\"#product\").val(),\n                        quantity: $(\"#quantity\").val(),\n                        donation: $(\"input[name='donation']:checked\").val() || 'no' \n                    };\n                    const queryString = $.param(formData);\n\n                    $.ajax({\n                        url: '/process_purchase?' + queryString,\n                        type: 'GET',\n                        complete: function(response) {\n                            const confirmationMessage = `Order submitted for: ${response.responseJSON.firstName} ${response.responseJSON.lastName} ${response.responseJSON.quantity} x ${response.responseJSON.product} $${response.responseJSON.total.toFixed(2)}`;\n                            $(\"#confirmation\").html(`<p>${confirmationMessage}</p>`);\n                            $(\"#order-form\")[0].reset();\n                        }\n                    });\n\n                });\n        });\n\n\n\n\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
