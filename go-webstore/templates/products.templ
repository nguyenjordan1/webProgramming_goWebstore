package templates

import (
    "math/rand/v2"
    "fmt"
    "go-store/types"
)

templ Products(products types.ProductResults) {
    <!DOCTYPE html>
    <html>
    <head>
        <title>Go Webstore</title>
        <link rel="stylesheet" href={fmt.Sprintf("assets/styles/styles.css?%d", rand.IntN(10000))}>
    </head>
    <body>
        @Header() 
        <main>
            <h2>Product Information</h2>
            <div class="table-wrapper">
                <table>
                    <thead>
                        <th>Product Name</th>
                        <th>Image Name</th>
                        <th>In Stock</th>
                        <th>Price</th>
                        <th>Inactive</th>
                    </thead>
                    <tbody>
                        for _, product := range products.Product {
                            <tr onclick="fillFormFromCustomerRow(this)">
                                <td>{ product.ProductName }</td>
                                <td>{product.ImageName}</td>
                                <td>{ fmt.Sprintf("%d", product.InStock) }</td>
                                <td>{ fmt.Sprintf("%.2f", product.Price) }</td>
                                <td>{ fmt.Sprintf("%d", product.Inactive) }</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </main>

        <div class="container">
            <form id="productForm" method="post" onsubmit="submitProductForm(); return false;">
                <fieldset>
                    <legend>Product Info</legend>
                    <input type="hidden" id="productID" name="productID"> 
                    <label for="pname">Product name:</label><br>
                    <input type="text" id="pname" name="pname" pattern="[A-Za-z\s']+" title="Only letters, spaces, and apostrophes allowed" required><br>

                    <label for="pimage">Product Image:</label><br>
                    <input type="text" id="pimage" name="pimage" pattern="[A-Za-z\s'.]+" title="Only letters, spaces, apostrophes, and periods allowed" required><br>

                    <label for="quantity">Quantity:</label><br>
                    <input type="number" id="quantity" name="quantity" min="1" title="Please enter a valid integer quantity" required><br>

                    <label for="price">Price:</label><br>
                    <input type="number" id="price" name="price" step="0.01" min="0" title="Please enter a valid price" required><br>

                    <button type="button" class="status-button" id="status-button" onclick="toggleStatus()">Inactive</button>
                </fieldset>

                <button type="button" onclick="submitProductForm()">Add Product</button>
                <button type="button" onclick="updateProductForm()">Update</button>
                <button type="button" onclick="deleteProductForm()">Delete</button>
            </form>


        </div>

        @Footer() 

        <script>
            function toggleStatus() {
                const button = document.getElementById('status-button');
                const label = document.getElementById('status-label');

                button.classList.toggle('active');

                if (button.classList.contains('active')) {
                    button.innerText = 'Active';
                    label.innerText = 'Active';
                } else {
                    button.innerText = 'Inactive';
                    label.innerText = 'Inactive';
                }
            }

            // function fillFormWithProductData(productID, productName, productImage, inStock, price, inactive) {
            //     document.getElementById('productID').value = productID;
            //     document.getElementById('pname').value = productName;
            //     document.getElementById('pimage').value = productImage;
            //     document.getElementById('quantity').value = inStock;
            //     document.getElementById('price').value = price;

            //     // Set the status button text based on the "inactive" value
            //     const button = document.getElementById('status-button');
            //     if (inactive === 0) {
            //         button.classList.remove('active');
            //         button.innerText = 'Inactive';
            //     } else {
            //         button.classList.add('active');
            //         button.innerText = 'Active';
            //     }
            // }

            function submitProductForm() {
                const formData = {
                    pname: document.getElementById('pname').value,
                    pimage: document.getElementById('pimage').value,
                    quantity: parseInt(document.getElementById('quantity').value),
                    price: parseFloat(document.getElementById('price').value),
                    status: document.getElementById('status-button').classList.contains('active') ? 1 : 0
                };

                fetch('/addProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Product added successfully", data);
                    alert("Product added, CONGRATS!");
                })
                .catch(error => {
                    console.error("Error adding product:", error);
                });
            }
            
            function updateProductForm() {
                const formData = {
                    pname: document.getElementById('pname').value,
                    pimage: document.getElementById('pimage').value,
                    quantity: parseInt(document.getElementById('quantity').value),
                    price: parseFloat(document.getElementById('price').value),
                    status: document.getElementById('status-button').classList.contains('active') ? 1 : 0
                };

    //              console.log("Product Name (pname):", formData.pname);
    // console.log("Product Image (pimage):", formData.pimage);
    // console.log("Quantity:", formData.quantity);
    // console.log("Price:", formData.price);
    // console.log("Status:", formData.status);

                fetch('/updateProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Product updated successfully", data);
                    alert("Product updated successfully!");
                })
                .catch(error => {
                    console.error("Error updating product:", error);
                });
            }

            function deleteProductForm() {
                const isConfirmed = confirm("Are you sure you want to delete this item?");
                if (isConfirmed) {
                    const formData = {
                        pname: document.getElementById('pname').value,
                        pimage: document.getElementById('pimage').value,
                        quantity: parseInt(document.getElementById('quantity').value),
                        price: parseFloat(document.getElementById('price').value),
                        status: document.getElementById('status-button').classList.contains('active') ? 1 : 0
                    };

                    fetch('/deleteProduct', {  
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Product deleted successfully", data);  
                        alert("Product deleted, it's gone!");
                    })
                    .catch(error => {
                        console.error("Error deleting product:", error);
                    });
                } else {
                    console.log("Product deletion canceled");
                }
            }


            function fillFormFromCustomerRow(row) {
                const cells = row.getElementsByTagName("td");
                document.getElementById("pname").value = cells[0].textContent;
                document.getElementById("pimage").value = cells[1].textContent;
                document.getElementById("quantity").value = cells[2].textContent;
                document.getElementById("price").value = cells[3].textContent;
                const statusButton = document.getElementById("status-button");
                if (parseInt(cells[4].textContent) === 1) {
                    statusButton.textContent = "Inactive";
                } else {
                    statusButton.textContent = "Active";
                }
            }



        </script>

    </body>
    </html>
}
